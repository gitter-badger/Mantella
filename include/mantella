//------------------------------------------------------------------------------
// Copyright 2013-2015 Sebastian Niemann <niemann@sra.uni-hannover.de>.
//
// Licensed under the MIT License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://opensource.org/licenses/MIT
//
// Authors and contributors:
//   Sebastian Niemann - Lead developer
//   Romeo Shuka
//   Daniel Kiechle
//   Wolff Bock von Wülfingen
//   Lennard Nöhren
//   Oskar Pusz
//------------------------------------------------------------------------------
#pragma once

#define MANTELLA_VERSION_MAJOR 0
#define MANTELLA_VERSION_MINOR 10
#define MANTELLA_VERSION_PATCH 0

//
// Mantella
//

// Configuration
#include <mantella_bits/config.hpp>

// Assert
#include <mantella_bits/helper/assert.hpp>

// Random number generator
#include <mantella_bits/helper/rng.hpp>

// MPI
#include <mantella_bits/helper/mpi.hpp>

// Helper
#include <mantella_bits/helper/geometry.hpp>
#include <mantella_bits/helper/printable.hpp>
#include <mantella_bits/helper/quasiRandomSequence.hpp>
#include <mantella_bits/helper/random.hpp>
#include <mantella_bits/helper/regression.hpp>
#include <mantella_bits/helper/setTheory.hpp>
#include <mantella_bits/helper/statistic.hpp>
#include <mantella_bits/helper/unorderedContainer.hpp>

// Distance functions
#include <mantella_bits/distanceFunction.hpp>
#include <mantella_bits/distanceFunction/pNorm.hpp>
#include <mantella_bits/distanceFunction/mahalanobisDistance.hpp>

// Regression functions
#include <mantella_bits/regressionFunction.hpp>
#include <mantella_bits/regressionFunction/constantPolynomialRegressionFunction.hpp>
#include <mantella_bits/regressionFunction/linearPolynomialRegressionFunction.hpp>
#include <mantella_bits/regressionFunction/quadraticPolynomialRegressionFunction.hpp>
#include <mantella_bits/regressionFunction/cubicPolynomialRegressionFunction.hpp>

// Correlation functions
#include <mantella_bits/correlationFunction.hpp>
#include <mantella_bits/correlationFunction/polynomialCorrelationFunction.hpp>
#include <mantella_bits/correlationFunction/splineCorrelationFunction.hpp>
#include <mantella_bits/correlationFunction/exponentialCorrelationFunction.hpp>
#include <mantella_bits/correlationFunction/gaussianCorrelationFunction.hpp>
  
// Radial basis functions
#include <mantella_bits/radialBasisFunction.hpp>
#include <mantella_bits/radialBasisFunction/polyharmonicSplineRadialBasisFunction.hpp>
#include <mantella_bits/radialBasisFunction/multiquadraticRadialBasisFunction.hpp>
#include <mantella_bits/radialBasisFunction/gaussianRadialBasisFunction.hpp>
  
// Samples selections
#include <mantella_bits/samplesSelection.hpp>
#include <mantella_bits/samplesSelection/bestFittingSamplesSelection.hpp>
#include <mantella_bits/samplesSelection/bestNeighbourhoodSamplesSelection.hpp>
#include <mantella_bits/samplesSelection/bestSamplesSelection.hpp>
#include <mantella_bits/samplesSelection/randomSamplesSelection.hpp>

// Optimisation problems
#include <mantella_bits/optimisationProblem.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/attractiveSectorFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/bentCigarFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/buecheRastriginFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/compositeGriewankRosenbrockFunctionF8F2.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/differentPowersFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/discusFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/ellipsoidalFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/ellipsoidalFunctionRotated.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/gallaghersGaussian101mePeaksFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/gallaghersGaussian21hiPeaksFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/katsuuraFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/linearSlope.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/lunacekBiRastriginFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/rastriginFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/rastriginFunctionRotated.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/rosenbrockFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/rosenbrockFunctionRotated.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/schaffersF7Function.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/schaffersF7FunctionIllConditioned.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/schwefelFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/sharpRidgeFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/sphereFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/stepEllipsoidalFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/weierstrassFunction.hpp>
#include <mantella_bits/optimisationProblem/roboticsOptimisationProblem.hpp>
#include <mantella_bits/optimisationProblem/roboticsOptimisationProblem/robotModel.hpp>
#include <mantella_bits/optimisationProblem/roboticsOptimisationProblem/robotModel/parallelKinematicMachine3PRPR.hpp>
#include <mantella_bits/optimisationProblem/roboticsOptimisationProblem/robotModel/parallelKinematicMachine3PRRR.hpp>
#include <mantella_bits/optimisationProblem/roboticsOptimisationProblem/robotModel/parallelKinematicMachine3PRUS.hpp>
#include <mantella_bits/optimisationProblem/roboticsOptimisationProblem/robotModel/parallelKinematicMachine3PUPS.hpp>
#include <mantella_bits/optimisationProblem/roboticsOptimisationProblem/robotModel/parallelKinematicMachine4PRUS.hpp>
#include <mantella_bits/optimisationProblem/roboticsOptimisationProblem/robotModel/parallelKinematicMachine6PRUS.hpp>
#include <mantella_bits/optimisationProblem/roboticsOptimisationProblem/robotModel/parallelKinematicMachine6PUPS.hpp>
#include <mantella_bits/optimisationProblem/roboticsOptimisationProblem/robotModel/multiLevelStewartPlatform.hpp>
#include <mantella_bits/optimisationProblem/roboticsOptimisationProblem/endEffectorPoseError.hpp>
#include <mantella_bits/optimisationProblem/surrogateModel.hpp>
#include <mantella_bits/optimisationProblem/surrogateModel/polynomialFunctionModel.hpp>
#include <mantella_bits/optimisationProblem/surrogateModel/radialBasisFunctionModel.hpp>
#include <mantella_bits/optimisationProblem/surrogateModel/krigingModel.hpp>
#include <mantella_bits/optimisationProblem/surrogateModel/multivariateAdaptiveRegressionSplinesModel.hpp>
#include <mantella_bits/optimisationProblem/surrogateModel/artificialNeuralNetwork.hpp>

// Optimisation algorithms
#include <mantella_bits/optimisationAlgorithm.hpp>
#include <mantella_bits/optimisationAlgorithm/samplingBasedOptimisationAlgorithm.hpp>
#include <mantella_bits/optimisationAlgorithm/samplingBasedOptimisationAlgorithm/gridSearch.hpp>
#include <mantella_bits/optimisationAlgorithm/samplingBasedOptimisationAlgorithm/randomSearch.hpp>
#include <mantella_bits/optimisationAlgorithm/trajectoryBasedOptimisationAlgorithm.hpp>
#include <mantella_bits/optimisationAlgorithm/trajectoryBasedOptimisationAlgorithm/hillClimbing.hpp>
#include <mantella_bits/optimisationAlgorithm/trajectoryBasedOptimisationAlgorithm/hookeJeevesAlgorithm.hpp>
#include <mantella_bits/optimisationAlgorithm/trajectoryBasedOptimisationAlgorithm/simulatedAnnealing.hpp>
#include <mantella_bits/optimisationAlgorithm/populationBasedOptimisationAlgorithm.hpp>
#include <mantella_bits/optimisationAlgorithm/populationBasedOptimisationAlgorithm/particleSwarmOptimisation.hpp>

// Samples selection
#include <mantella_bits/samplesSelection.hpp>
#include <mantella_bits/samplesSelection/bestFittingSamplesSelection.hpp>
#include <mantella_bits/samplesSelection/bestNeighbourhoodSamplesSelection.hpp>
#include <mantella_bits/samplesSelection/bestSamplesSelection.hpp>
#include <mantella_bits/samplesSelection/randomSamplesSelection.hpp>

// Property analyses
#include <mantella_bits/propertyAnalysis.hpp>
#include <mantella_bits/propertyAnalysis/passivePropertyAnalysis.hpp>
#include <mantella_bits/propertyAnalysis/passivePropertyAnalysis/fitnessDistanceCorrelationAnalysis.hpp>
#include <mantella_bits/propertyAnalysis/passivePropertyAnalysis/lipschitzContinuityAnalysis.hpp>
#include <mantella_bits/propertyAnalysis/passivePropertyAnalysis/hoelderContinuityAnalysis.hpp>
#include <mantella_bits/propertyAnalysis/passivePropertyAnalysis/polynomialFunctionModelAnalysis.hpp>
#include <mantella_bits/propertyAnalysis/activePropertyAnalysis.hpp>
#include <mantella_bits/propertyAnalysis/activePropertyAnalysis/additiveSeparabilityAnalysis.hpp>
#include <mantella_bits/propertyAnalysis/activePropertyAnalysis/multiplicativeSeparabilityAnalysis.hpp>
#include <mantella_bits/propertyAnalysis/activePropertyAnalysis/polynomialProportionalityAnalysis.hpp>
#include <mantella_bits/propertyAnalysis/activePropertyAnalysis/neighbourhoodPeriodicityAnalysis.hpp>
#include <mantella_bits/propertyAnalysis/activePropertyAnalysis/translationPeriodicityAnalysis.hpp>
  
// Cluster analyses
#include <mantella_bits/clusterAnalysis.hpp>
#include <mantella_bits/clusterAnalysis/basicSequentialAlgorithmicScheme.hpp>
#include <mantella_bits/clusterAnalysis/twoThresholdSequentialAlgorithmicScheme.hpp>

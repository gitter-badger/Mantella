//------------------------------------------------------------------------------
// Copyright 2013-2015 Sebastian Niemann <niemann@sra.uni-hannover.de>.
//
// Licensed under the MIT License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://opensource.org/licenses/MIT
//
// Authors:
//   Sebastian Niemann - Lead developer
//   Romeo Shuka - Developer
//   Daniel Kiechle - Software tester
//   Wolff Bock von WÃ¼lfingen - Developer
//------------------------------------------------------------------------------
#pragma once

#define MANTELLA_VERSION_MAJOR 0
#define MANTELLA_VERSION_MINOR 9
#define MANTELLA_VERSION_PATCH 0

//
// Configuration
//

#undef MANTELLA_USE_MPI
#if defined(MPI_SUCCESS)
  #define MANTELLA_USE_MPI
#endif

#define MANTELLA_USE_CACHES

//
// Prerequirements
//

// C++ Standard library
#include <algorithm>
#include <array>
#include <cassert>
#include <cmath>
#include <cstddef>
#include <cstdlib>
#include <cstdio>
#include <functional>
#include <limits>
#include <map>
#include <memory>
#include <random>
#include <sstream>
#include <stdexcept>
#include <string>
#include <type_traits>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>

// Armadillo
#include <armadillo>

#if defined(MANTELLA_USE_MPI)
  // MPI
  #include <mpi.h>
#endif

//
// Mantella
//

// Assert
#include <mantella_bits/helper/assert.hpp>

// Random number generator
#include <mantella_bits/helper/rng.hpp>

// Helper
#include <mantella_bits/helper/geometry.hpp>
#include <mantella_bits/helper/printable.hpp>
#include <mantella_bits/helper/quasiRandomSequence.hpp>
#include <mantella_bits/helper/random.hpp>
#include <mantella_bits/helper/setTheory.hpp>
#include <mantella_bits/helper/string.hpp>
#include <mantella_bits/helper/unorderedContainer.hpp>
#include <mantella_bits/helper/rankingSupportVectorMachine.hpp>

// Optimisation problems
#include <mantella_bits/optimisationProblem.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/attractiveSectorFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/bentCigarFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/buecheRastriginFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/compositeGriewankRosenbrockFunctionF8F2.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/differentPowersFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/discusFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/ellipsoidalFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/ellipsoidalFunctionRotated.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/gallaghersGaussian101mePeaksFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/gallaghersGaussian21hiPeaksFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/katsuuraFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/linearSlope.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/lunacekBiRastriginFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/rastriginFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/rastriginFunctionRotated.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/rosenbrockFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/rosenbrockFunctionRotated.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/schaffersF7Function.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/schaffersF7FunctionIllConditioned.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/schwefelFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/sharpRidgeFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/sphereFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/stepEllipsoidalFunction.hpp>
#include <mantella_bits/optimisationProblem/blackBoxOptimisationBenchmark/weierstrassFunction.hpp>
#include <mantella_bits/optimisationProblem/robotic/robotModel.hpp>
#include <mantella_bits/optimisationProblem/robotic/robotModel/parallelKinematicMachine3PRPR.hpp>
#include <mantella_bits/optimisationProblem/robotic/robotModel/parallelKinematicMachine3PRRR.hpp>
#include <mantella_bits/optimisationProblem/robotic/robotModel/parallelKinematicMachine3PRUS.hpp>
#include <mantella_bits/optimisationProblem/robotic/robotModel/parallelKinematicMachine3PUPS.hpp>
#include <mantella_bits/optimisationProblem/robotic/robotModel/parallelKinematicMachine4PRUS.hpp>
#include <mantella_bits/optimisationProblem/robotic/robotModel/parallelKinematicMachine6PRUS.hpp>
#include <mantella_bits/optimisationProblem/robotic/robotModel/parallelKinematicMachine6PUPS.hpp>
#include <mantella_bits/optimisationProblem/robotic/robotModel/multiLevelStewartPlatform.hpp>
#include <mantella_bits/optimisationProblem/robotic/endEffectorPoseError.hpp>

// Optimisation algorithms
#include <mantella_bits/optimisationAlgorithm.hpp>
#include <mantella_bits/optimisationAlgorithm/samplingBasedOptimisationAlgorithm.hpp>
#include <mantella_bits/optimisationAlgorithm/samplingBasedOptimisationAlgorithm/gridSearch.hpp>
#include <mantella_bits/optimisationAlgorithm/samplingBasedOptimisationAlgorithm/randomSearch.hpp>
#include <mantella_bits/optimisationAlgorithm/trajectoryBasedOptimisationAlgorithm.hpp>
#include <mantella_bits/optimisationAlgorithm/trajectoryBasedOptimisationAlgorithm/hillClimbing.hpp>
#include <mantella_bits/optimisationAlgorithm/trajectoryBasedOptimisationAlgorithm/hookeJeevesAlgorithm.hpp>
#include <mantella_bits/optimisationAlgorithm/trajectoryBasedOptimisationAlgorithm/simulatedAnnealing.hpp>
#include <mantella_bits/optimisationAlgorithm/populationBasedOptimisationAlgorithm.hpp>
#include <mantella_bits/optimisationAlgorithm/populationBasedOptimisationAlgorithm/standardParticleSwarmOptimisation2011.hpp>

// Property analyses
#include <mantella_bits/propertyAnalysis.hpp>
#include <mantella_bits/propertyAnalysis/passivePropertyAnalysis.hpp>
#include <mantella_bits/propertyAnalysis/passivePropertyAnalysis/fitnessDistanceCorrelationAnalysis.hpp>
#include <mantella_bits/propertyAnalysis/passivePropertyAnalysis/neighbourFitnessCorrelationAnalysis.hpp>
#include <mantella_bits/propertyAnalysis/passivePropertyAnalysis/lipschitzContinuityAnalysis.hpp>
#include <mantella_bits/propertyAnalysis/passivePropertyAnalysis/hoelderContinuityAnalysis.hpp>
#include <mantella_bits/propertyAnalysis/passivePropertyAnalysis/linearFunctionModelAnalysis.hpp>
#include <mantella_bits/propertyAnalysis/passivePropertyAnalysis/quadraticFunctionModelAnalysis.hpp>
#include <mantella_bits/propertyAnalysis/activePropertyAnalysis.hpp>
#include <mantella_bits/propertyAnalysis/activePropertyAnalysis/additiveSeparabilityAnalysis.hpp>
#include <mantella_bits/propertyAnalysis/activePropertyAnalysis/multiplicativeSeparabilityAnalysis.hpp>
#include <mantella_bits/propertyAnalysis/activePropertyAnalysis/linearProportionalityAnalysis.hpp>
